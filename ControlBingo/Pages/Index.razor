@inject IJSRuntime JSRuntime

@page "/"
@using System.Text.Json;

<header>
    <nav class="navbar navbar-expand-lg bg-primary" data-bs-theme="dark">
        <div class="container-fluid justify-content-center">
            <a class="fs-bold h1 text-decoration-none text-white">Bingo</a>
        </div>
    </nav>
</header>

<main class="row justify-content-center my-4 w-100">
    <div class="row justify-content-center">
        <form class="col-10 col-md-6" @onsubmit="SaveNumber">
            <div class="mb-3">
                <label for="number" class="form-label fs-5 text-muted">Inserte un número</label>
                <input type="number" class="form-control" id="number" placeholder="Número"
                       @bind="number" autocomplete="off" autofocus />
            </div>
            <div class="mt-2">
                <button type="submit" class="btn btn-primary w-100">Guardar</button>
            </div>
            <div class="mt-2">
                <button type="button" @onclick="DeleteAll" class="btn btn-danger w-100">Eliminar números</button>
            </div>
        </form>
    </div>

    @if (dataList == null || !dataList.Any())
    {
        <div class="text-center mt-5">
            <p class="fs-5 text-muted">Nada que mostrar</p>
        </div>
    }
    else
    {
        <div class="col-10 col-md-6">
            <div class="row row-cols-4 justify-content-start mt-5">
                @foreach (var item in dataList.OrderByDescending(x => x.Id))
                {
                    <div class="col-6 col-md-3 mt-3">
                        <div class="card shadow-sm">
                            <div class="card-body text-center">
                                <div class="d-flex justify-content-end">
                                    <button type="button" class="btn btn-outline-danger btn-sm"
                                            @onclick="() => DeleteById(item.Id)">
                                        X
                                    </button>
                                </div>
                                <h2 class="card-title m-0" style="font-size: 4rem;">@item.Number</h2>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</main>

@code {
    private List<Data> dataList = new();
    private string number = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var dataJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "dataList");
        if (!string.IsNullOrEmpty(dataJson))
        {
            dataList = JsonSerializer.Deserialize<List<Data>>(dataJson)!;
        }
    }

    private async Task SaveNumber()
    {
        if (string.IsNullOrWhiteSpace(number)) return;

        if (!int.TryParse(number, out int parsedNumber))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Por favor ingrese un número válido.");
            return;
        }

        if (dataList.Any(d => d.Number == parsedNumber))
        {
            await JSRuntime.InvokeVoidAsync("alert", $"El número {parsedNumber} ya está registrado.");
            number = string.Empty;
            return;
        }

        int newId = dataList.Any() ? dataList.Max(x => x.Id) + 1 : 1;

        dataList.Add(new Data
        {
            Id = newId,
            Number = parsedNumber
        });

        await SaveToLocalStorage();
        number = string.Empty;
    }

    private async Task DeleteById(int id)
    {
        dataList = dataList.Where(data => data.Id != id).ToList();
        await SaveToLocalStorage();
    }

    private async Task DeleteAll()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "¿Seguro que quieres eliminar todos los números?");
        if (confirm)
        {
            dataList.Clear();
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "dataList");
        }
    }

    private async Task SaveToLocalStorage()
    {
        var dataJson = JsonSerializer.Serialize(dataList);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "dataList", dataJson);
    }

    public class Data
    {
        public int Id { get; set; }
        public int Number { get; set; }
    }
}