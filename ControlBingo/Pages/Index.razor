@inject IJSRuntime JSRuntime

@page "/"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web

<header>
    <nav class="navbar navbar-expand-lg bg-primary shadow-sm">
        <div class="container justify-content-center">
            <a class="fw-bold h2 text-decoration-none text-white">🎲 Bingo</a>
        </div>
    </nav>
</header>

<main class="container-fluid my-4">
    <div class="row g-4">
        <!-- Panel izquierdo -->
        <div class="col-12 col-md-3">
            <div class="card shadow-lg p-4 sticky-top" style="top: 1rem;">
                <h5 class="mb-3 text-muted text-center">Panel de Control</h5>
                <div class="form-floating mb-3">
                    <input type="number" class="form-control form-control-lg" id="number"
                           placeholder="Número" @bind="number" autocomplete="off"
                           @onkeydown="HandleKeyDown" @ref="numberInput" />
                    <label for="number">Inserte un número</label>
                </div>

                <button type="button" class="btn btn-primary w-100 mb-3" @onclick="SaveNumber">
                    Guardar
                </button>
                <button type="button" class="btn btn-outline-danger w-100" @onclick="DeleteAll">
                    Eliminar todos
                </button>

                <!-- Último número registrado -->
                @if (dataList.Any())
                {
                    <div class="mt-4 p-3 bg-warning rounded text-center shadow">
                        <h2 class="fw-bold mb-0">Último número</h2>
                        <h1 class="display-1 fw-bold text-dark">@dataList.Last().Number</h1>
                    </div>
                }
            </div>
        </div>


        <!-- Panel derecho -->
        <div class="col-12 col-md-9">
            @if (dataList == null || !dataList.Any())
            {
                <div class="text-center mt-5">
                    <p class="fs-3 text-muted">Nada que mostrar</p>
                </div>
            }
            else
            {
                <div class="row row-cols-2 row-cols-md-4 row-cols-lg-6 g-4">
                    @foreach (var item in dataList.OrderByDescending(x => x.Id))
                    {
                        <div class="col">
                            <div class="card shadow border-0 rounded-4 text-center bg-light">
                                <div class="card-body p-4">
                                    <h1 class="fw-bold display-3 text-primary">@item.Number</h1>
                                    <button type="button" class="btn btn-sm btn-outline-danger mt-3"
                                            @onclick="() => DeleteById(item.Id)">
                                        Eliminar
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</main>

@code {
    private List<Data> dataList = new();
    private string number = string.Empty;
    private ElementReference numberInput; // referencia al input

    protected override async Task OnInitializedAsync()
    {
        var dataJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "dataList");
        if (!string.IsNullOrEmpty(dataJson))
        {
            dataList = JsonSerializer.Deserialize<List<Data>>(dataJson)!;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveNumber();
        }
    }

    private async Task SaveNumber()
    {
        if (string.IsNullOrWhiteSpace(number)) return;

        if (!int.TryParse(number, out int parsedNumber))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Por favor ingrese un número válido.");
            number = string.Empty;
            await FocusInput();
            return;
        }

        if (dataList.Any(d => d.Number == parsedNumber))
        {
            await JSRuntime.InvokeVoidAsync("alert", $"El número {parsedNumber} ya está registrado.");
            number = string.Empty;
            await FocusInput();
            return;
        }

        int newId = dataList.Any() ? dataList.Max(x => x.Id) + 1 : 1;

        dataList.Add(new Data
        {
            Id = newId,
            Number = parsedNumber
        });

        await SaveToLocalStorage();
        number = string.Empty;
        await FocusInput(); // 🔹 vuelve a enfocar el input
    }

    private async Task DeleteById(int id)
    {
        dataList = dataList.Where(data => data.Id != id).ToList();
        await SaveToLocalStorage();
    }

    private async Task DeleteAll()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "¿Seguro que quieres eliminar todos los números?");
        if (confirm)
        {
            dataList.Clear();
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "dataList");
            await FocusInput();
        }
    }

    private async Task SaveToLocalStorage()
    {
        var dataJson = JsonSerializer.Serialize(dataList);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "dataList", dataJson);
    }

    private async Task FocusInput()
    {
        await numberInput.FocusAsync();
    }

    public class Data
    {
        public int Id { get; set; }
        public int Number { get; set; }
    }
}